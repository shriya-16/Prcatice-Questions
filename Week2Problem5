#include <bits/stdc++.h>
using namespace std;
#define f(i, n) for(int i = 0; i < n; i++)

int findClosest(int arr[], int ele, int n){
    if(ele < arr[0])    return arr[0];
    if(ele > arr[n-1])  return arr[n-1];
    int i = 0, j = n, mid = 0;
    while(i < j){
        mid = (i+j)/2;
        if(arr[mid] == ele)
            return arr[mid];
        if(ele < arr[mid]){
            if(mid > 0 && ele > arr[mid-1])
                return (ele-arr[mid-1] > arr[mid]-ele)?arr[mid]:arr[mid-1];
            j = mid;
        }
        else{
            if(mid < n-1 && ele < arr[mid+1])
                return (ele-arr[mid] > arr[mid+1]-ele)?arr[mid+1]:arr[mid];
            i = mid+1;
        }
    }
    return arr[mid];
}

int minDiff(int arr1[], int arr2[], int arr3[], int a, int b, int c){
    int m;
    m = arr1[0]>arr2[0]?(arr1[0]>arr3[0]?1:3):(arr2[0]>arr3[0]?2:3);
    int *maxArr, minDiff = INT_MAX, size;
    if(m == 1)    maxArr = arr1, size = a;
    else if(m == 2)   maxArr = arr2, size = b;
    else    maxArr = arr3, size = c;
    for(int i = 0; i < size; i++){
        int x, y;
        if(maxArr == arr1){
            x = findClosest(arr2, maxArr[i], b);
            y = findClosest(arr3, maxArr[i], c);
        }
        else if(maxArr == arr2){
            x = findClosest(arr1, maxArr[i], a);
            y = findClosest(arr3, maxArr[i], c);
        }
        else{
            x = findClosest(arr1, maxArr[i], a);
            x = findClosest(arr2, maxArr[i], b);
        }
        int diff = max({x, y, maxArr[i]}) - min({x, y, maxArr[i]});
        if(diff < minDiff)
            minDiff = diff;
    }
    return minDiff;
}

int main() {
    int a, b, c;
    cin >> a; int arr1[a];
    f(i, a) cin >> arr1[i];
    cin >> b; int arr2[b];
    f(i, b) cin >> arr2[i];
    cin >> c; int arr3[c];
    f(i, c) cin >> arr3[i];
    cout << minDiff(arr1, arr2, arr3, a, b, c);
    return 0;
}
